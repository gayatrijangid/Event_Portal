<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Faculty Dashboard - SVKM Events</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding-bottom: 50px;
    }
    
    .navbar {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 20px 50px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
      position: sticky;
      top: 0;
      z-index: 1000;
    }
    
    .navbar-brand {
      font-size: 24px;
      font-weight: 700;
      color: #667eea;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .navbar-links {
      display: flex;
      gap: 10px;
    }
    
    .navbar a {
      color: #4a5568;
      text-decoration: none;
      padding: 10px 20px;
      border-radius: 8px;
      font-weight: 500;
      transition: all 0.3s;
    }
    
    .navbar a:hover {
      background: #667eea;
      color: white;
    }
    
    .container {
      max-width: 1400px;
      margin: 40px auto;
      padding: 0 30px;
    }
    
    .header {
      text-align: center;
      color: white;
      margin-bottom: 40px;
    }
    
    .header h2 {
      font-size: 36px;
      font-weight: 700;
      margin-bottom: 10px;
    }
    
    .header p {
      font-size: 18px;
      opacity: 0.9;
    }
    
    .dashboard-grid {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 30px;
      margin-bottom: 40px;
    }
    
    .card {
      background: white;
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    }
    
    .card h3 {
      color: #2d3748;
      font-size: 22px;
      margin-bottom: 25px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      color: #4a5568;
      font-weight: 600;
      margin-bottom: 8px;
      font-size: 14px;
    }
    
    .form-group input,
    .form-group textarea {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e2e8f0;
      border-radius: 10px;
      font-size: 15px;
      transition: all 0.3s;
      font-family: inherit;
    }
    
    .form-group input:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .form-group textarea {
      resize: vertical;
      min-height: 100px;
    }
    
    .btn {
      width: 100%;
      padding: 14px;
      border: none;
      border-radius: 10px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
    }
    
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }
    
    .stat-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 25px;
      border-radius: 15px;
      text-align: center;
    }
    
    .stat-card h4 {
      font-size: 32px;
      margin-bottom: 5px;
    }
    
    .stat-card p {
      opacity: 0.9;
      font-size: 14px;
    }
    
    .events-list {
      background: white;
      border-radius: 20px;
      padding: 30px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
    }
    
    .events-list h3 {
      color: #2d3748;
      font-size: 24px;
      margin-bottom: 25px;
    }
    
    table {
      width: 100%;
      border-collapse: collapse;
    }
    
    th {
      background: #f7fafc;
      padding: 15px;
      text-align: left;
      font-weight: 600;
      color: #4a5568;
      border-bottom: 2px solid #e2e8f0;
    }
    
    td {
      padding: 15px;
      border-bottom: 1px solid #e2e8f0;
      color: #2d3748;
    }
    
    tr:hover {
      background: #f7fafc;
    }
    
    .action-buttons {
      display: flex;
      gap: 8px;
    }
    
    .btn-edit, .btn-delete {
      padding: 8px 16px;
      border: none;
      border-radius: 6px;
      font-size: 14px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .btn-edit {
      background: #4299e1;
      color: white;
    }
    
    .btn-edit:hover {
      background: #3182ce;
      transform: scale(1.05);
    }
    
    .btn-delete {
      background: #f56565;
      color: white;
    }
    
    .btn-delete:hover {
      background: #e53e3e;
      transform: scale(1.05);
    }
    
    .modal {
      display: none;
      position: fixed;
      z-index: 2000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      backdrop-filter: blur(5px);
    }
    
    .modal-content {
      background-color: white;
      margin: 5% auto;
      padding: 40px;
      border-radius: 20px;
      width: 90%;
      max-width: 600px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      animation: slideDown 0.3s ease;
    }
    
    @keyframes slideDown {
      from {
        transform: translateY(-50px);
        opacity: 0;
      }
      to {
        transform: translateY(0);
        opacity: 1;
      }
    }
    
    .close {
      color: #a0aec0;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
      transition: color 0.2s;
    }
    
    .close:hover {
      color: #2d3748;
    }
    
    .no-events {
      text-align: center;
      padding: 60px 20px;
      color: #718096;
    }
    
    .no-events i {
      font-size: 48px;
      margin-bottom: 20px;
      opacity: 0.5;
    }
    
    @media (max-width: 1024px) {
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 768px) {
      .navbar {
        padding: 15px 20px;
      }
      
      .container {
        padding: 0 15px;
      }
      
      table {
        font-size: 14px;
      }
      
      .action-buttons {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <div class="navbar">
    <div class="navbar-brand">
      <i class="fas fa-chalkboard-teacher"></i> Faculty Dashboard
    </div>
    <div class="navbar-links">
      <a href="/"><i class="fas fa-home"></i> Home</a>
      <a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
    </div>
  </div>

  <div class="container">
    <div class="header">
      <h2>üë®‚Äçüè´ Faculty Event Management</h2>
      <p>Create and manage campus events efficiently</p>
    </div>

    <div class="stats">
      <div class="stat-card">
        <h4><%= events.length %></h4>
        <p>Total Events</p>
      </div>
      <div class="stat-card">
        <h4><%= events.filter(e => new Date(e.deadline) >= new Date()).length %></h4>
        <p>Active Events</p>
      </div>
    </div>

    <div class="dashboard-grid">
      <div class="card">
        <h3><i class="fas fa-plus-circle"></i> Add New Event</h3>
        <form id="addEventForm">
          <div class="form-group">
            <label>Event Name</label>
            <input type="text" name="name" placeholder="Enter event name" required>
          </div>
          <div class="form-group">
            <label>Description</label>
            <textarea name="description" placeholder="Describe your event..." required></textarea>
          </div>
          <div class="form-group">
            <label>Event Date</label>
            <input type="date" name="date" required>
          </div>
          <div class="form-group">
            <label>Registration Deadline</label>
            <input type="date" name="deadline" required>
          </div>
          <div class="form-group">
            <label>Registration Link</label>
            <input type="url" name="link" placeholder="https://..." required>
          </div>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-plus"></i> Create Event
          </button>
        </form>
      </div>

      <div class="events-list">
        <h3><i class="fas fa-list"></i> Your Events</h3>
        <% if (events.length > 0) { %>
          <table>
            <thead>
              <tr>
                <th>Event Name</th>
                <th>Date</th>
                <th>Deadline</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% events.forEach(event => { %>
                <tr>
                  <td><strong><%= event.title %></strong></td>
                  <td><%= new Date(event.event_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></td>
                  <td><%= new Date(event.deadline).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) %></td>
                  <td>
                    <div class="action-buttons">
                      <button class="btn-edit" onclick="editEvent('<%= event.id %>', '<%= event.title.replace %>', '<%= event.description.replace%>', '<%= event.event_date %>', '<%= event.deadline %>', '<%= event.link %>')">
                        <i class="fas fa-edit"></i> Edit
                      </button>
                      <button class="btn-delete" onclick="deleteEvent('<%= event.id %>')">
                        <i class="fas fa-trash"></i> Delete
                      </button>
                    </div>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        <% } else { %>
          <div class="no-events">
            <i class="fas fa-calendar-plus"></i>
            <p>No events created yet. Add your first event!</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Edit Event Modal -->
  <div id="editModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeEditModal()">&times;</span>
      <h3><i class="fas fa-edit"></i> Edit Event</h3>
      <br>
      <form id="editEventForm">
        <input type="hidden" id="editEventId">
        <div class="form-group">
          <label>Event Name</label>
          <input type="text" id="editName" required>
        </div>
        <div class="form-group">
          <label>Description</label>
          <textarea id="editDescription" required></textarea>
        </div>
        <div class="form-group">
          <label>Event Date</label>
          <input type="date" id="editDate" required>
        </div>
        <div class="form-group">
          <label>Registration Deadline</label>
          <input type="date" id="editDeadline" required>
        </div>
        <div class="form-group">
          <label>Registration Link</label>
          <input type="url" id="editLink" required>
        </div>
        <button type="submit" class="btn btn-primary">
          <i class="fas fa-save"></i> Update Event
        </button>
      </form>
    </div>
  </div>

  <script>
    // Add event
    document.getElementById('addEventForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = {
        name: e.target.name.value,
        description: e.target.description.value,
        date: e.target.date.value,
        deadline: e.target.deadline.value,
        link: e.target.link.value
      };
      try {
        const res = await fetch('/api/events', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });
        const data = await res.json();
        if (data.success) {
          alert('‚úÖ Event added successfully!');
          location.reload();
        } else {
          alert('‚ùå Error: ' + data.error);
        }
      } catch (error) {
        alert('‚ùå An error occurred');
      }
    });

    // Edit event function
    function editEvent(id, title, description, date, deadline, link) {
      document.getElementById('editEventId').value = id;
      document.getElementById('editName').value = title;
      document.getElementById('editDescription').value = description;
      document.getElementById('editDate').value = date;
      document.getElementById('editDeadline').value = deadline;
      document.getElementById('editLink').value = link;
      document.getElementById('editModal').style.display = 'block';
    }

    function closeEditModal() {
      document.getElementById('editModal').style.display = 'none';
    }

    // Update event
    document.getElementById('editEventForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const id = document.getElementById('editEventId').value;
      const formData = {
        title: document.getElementById('editName').value,
        description: document.getElementById('editDescription').value,
        event_date: document.getElementById('editDate').value,
        deadline: document.getElementById('editDeadline').value,
        link: document.getElementById('editLink').value
      };
      try {
        const res = await fetch(`/api/events/${id}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });
        const data = await res.json();
        if (data.success) {
          alert('‚úÖ Event updated successfully!');
          location.reload();
        } else {
          alert('‚ùå Error: ' + data.error);
        }
      } catch (error) {
        alert('‚ùå An error occurred');
      }
    });

    // Delete event function
    async function deleteEvent(id) {
      if (!confirm('‚ö†Ô∏è Are you sure you want to delete this event?')) return;
      
      try {
        const res = await fetch(`/api/events/${id}`, {
          method: 'DELETE'
        });
        const data = await res.json();
        if (data.success) {
          alert('‚úÖ Event deleted successfully!');
          location.reload();
        } else {
          alert('‚ùå Error: ' + data.error);
        }
      } catch (error) {
        alert('‚ùå An error occurred');
      }
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
      const modal = document.getElementById('editModal');
      if (event.target == modal) {
        closeEditModal();
      }
    }
  </script>
</body>
</html>
